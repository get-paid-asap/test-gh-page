name: Deploy Protected Release Viewer Debug

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'release-viewer-protected.html'
      - '.github/workflows/deploy-viewer.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Debug Environment
        run: |
          echo "Checking environment variables..."
          echo "VIEWER_GITHUB_TOKEN is: ${{ secrets.VIEWER_GITHUB_TOKEN != '' && 'SET' || 'MISSING' }}"
          echo "VIEWER_PASSWORD is: ${{ secrets.VIEWER_PASSWORD != '' && 'SET' || 'MISSING' }}"
          echo "REPOSITORY is: ${{ secrets.REPOSITORY != '' && 'SET' || 'MISSING' }}"
          echo "Repository name: ${{ secrets.REPOSITORY }}"
          echo "Current branch: ${{ github.ref }}"
          echo "Files in root:"
          ls -la
          
      - name: Encrypt Token and Build Viewer
        env:
          GITHUB_TOKEN_VALUE: ${{ secrets.VIEWER_GITHUB_TOKEN }}
          VIEWER_PASSWORD: ${{ secrets.VIEWER_PASSWORD }}
          REPO_NAME: ${{ secrets.REPOSITORY }}
        run: |
          # Create encryption script
          cat > encrypt.js << 'EOF'
          const crypto = require('crypto');
          const fs = require('fs');

          // Get config from environment
          const token = process.env.GITHUB_TOKEN_VALUE;
          const password = process.env.VIEWER_PASSWORD;
          const repo = process.env.REPO_NAME;

          if (!token || !password || !repo) {
            console.error('Error: Missing required secrets!');
            console.error('Required secrets: VIEWER_GITHUB_TOKEN, VIEWER_PASSWORD, REPOSITORY');
            console.error(`Token: ${token ? 'SET' : 'MISSING'}`);
            console.error(`Password: ${password ? 'SET' : 'MISSING'}`);
            console.error(`Repository: ${repo ? 'SET' : 'MISSING'}`);
            process.exit(1);
          }

          console.log('=== Starting Encryption Process ===');
          console.log('Encrypting credentials with password-based encryption...');
          console.log(`Repository: ${repo}`);
          console.log(`Token length: ${token.length} characters`);
          console.log(`Password length: ${password.length} characters`);

          // Create credentials object (contains both repo and token)
          const credentials = JSON.stringify({
            repo: repo,
            token: token
          });
          console.log(`Credentials JSON length: ${credentials.length} characters`);

          // Generate salt and IV
          const salt = crypto.randomBytes(16);
          const iv = crypto.randomBytes(12);

          // Derive key from password
          const key = crypto.pbkdf2Sync(password, salt, 100000, 32, 'sha256');

          // Encrypt credentials (repo + token together)
          const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);
          const encrypted = Buffer.concat([
            cipher.update(credentials, 'utf8'),
            cipher.final()
          ]);
          const authTag = cipher.getAuthTag();

          // Combine encrypted data with auth tag
          const encryptedWithTag = Buffer.concat([encrypted, authTag]);

          // Create config object
          const config = {
            encryptedData: `${salt.toString('hex')}.${iv.toString('hex')}.${encryptedWithTag.toString('hex')}`
          };

          console.log('=== Encryption Complete ===');
          console.log('Repository name is now encrypted (hidden from source)');
          console.log(`Encrypted data length: ${config.encryptedData.length} characters`);
          console.log(`Config object: ${JSON.stringify(config).substring(0, 100)}...`);

          // Read HTML template
          console.log('\n=== Reading HTML Template ===');
          if (!fs.existsSync('release-viewer-protected.html')) {
            console.error('ERROR: release-viewer-protected.html not found!');
            console.log('Files in current directory:');
            console.log(fs.readdirSync('.').join('\n'));
            process.exit(1);
          }
          
          const html = fs.readFileSync('release-viewer-protected.html', 'utf8');
          console.log(`HTML template read successfully (${html.length} characters)`);
          
          // Check if placeholder exists
          if (!html.includes('%%ENCRYPTED_CONFIG%%')) {
            console.error('ERROR: Placeholder %%ENCRYPTED_CONFIG%% not found in HTML!');
            process.exit(1);
          }
          console.log('Placeholder found in HTML âœ“');

          // Replace placeholder with encrypted config
          const outputHtml = html.replace(
            '"%%ENCRYPTED_CONFIG%%"',
            JSON.stringify(config)
          );
          
          // Verify replacement worked
          if (outputHtml.includes('%%ENCRYPTED_CONFIG%%')) {
            console.error('ERROR: Placeholder was not replaced!');
            process.exit(1);
          }
          console.log('Placeholder replaced successfully âœ“');

          // Write to output
          fs.mkdirSync('viewer-output', { recursive: true });
          fs.writeFileSync('viewer-output/index.html', outputHtml);

          console.log('\n=== Build Complete ===');
          console.log('Built viewer page: viewer-output/index.html');
          console.log(`Output file size: ${fs.statSync('viewer-output/index.html').size} bytes`);
          EOF

          # Run encryption
          node encrypt.js

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './viewer-output'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "## ðŸŽ‰ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your protected release viewer has been deployed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Access URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Setup:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Open the URL on your phone" >> $GITHUB_STEP_SUMMARY
          echo "2. Enter your password (set in VIEWER_PASSWORD secret)" >> $GITHUB_STEP_SUMMARY
          echo "3. Bookmark it for easy access!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security:**" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Token is encrypted with AES-256-GCM" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Password never stored in code or logs" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Session cleared when browser closes" >> $GITHUB_STEP_SUMMARY

